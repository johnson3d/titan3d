#ifndef __SWRasterizer_SHADING_H__
#define __SWRasterizer_SHADING_H__

#include "../../Inc/VertexLayout.cginc"
#include "FRaster.cginc"

#define QUARK_SUBPIXEL_BITS								8
#define QUARK_SUBPIXEL_SAMPLES							(1 << QUARK_SUBPIXEL_BITS)
#define QUARK_SUBPIXEL_MASK								(QUARK_SUBPIXEL_SAMPLES - 1)

struct FRaster
{
	int4	ViewRect;
};

struct FRasterTri
{
	int2	MinPixel;
	int2	MaxPixel;

	float2	Edge01;
	float2	Edge12;
	float2	Edge20;

	float	C0;
	float	C1;
	float	C2;

	float3	DepthPlane;

	bool	bIsValid;
};

ByteAddressBuffer VisibleClusterBuffer;
RWByteAddressBuffer IndirectArgBuffer;
RWTexture2D<float4> OutputQuarkTexture;

struct FShadingStruct
{
    float2 QuarkRTSizeFactor;
    uint MaxVisClusterIndex;
    uint MaxClusterIndex;
	
    uint3 DispatchArg;
};

cbuffer cbShadingEnv DX_AUTOBIND
{
    FShadingStruct ShadingStruct;
}

struct FQuarkPixel
{
	
};

void WriteQuarkPixel(uint2 uv, FQuarkPixel pixel)
{
    OutputQuarkTexture[uv] = float4(1, 0, 0, 1);
}

FRasterTri SetupTriangle(float3 Verts[3]) //FRaster Raster, 
{
	FRasterTri Tri;
	Tri.bIsValid = true;
	//Tri.InterpData = InterpData;

	float3 v01 = Verts[1] - Verts[0];
	float3 v02 = Verts[2] - Verts[0];

	float DetXY = v01.x * v02.y - v01.y * v02.x;
	const bool bBackFace = (DetXY >= 0.0f);

//#if !NANITE_TWO_SIDED
//	Tri.bIsValid = !bBackFace;
//#endif

	float InvDet = rcp(DetXY);
	float2 GradZ;
	GradZ.x = (v01.z * v02.y - v01.y * v02.z) * InvDet;
	GradZ.y = (v01.x * v02.z - v01.z * v02.x) * InvDet;

	// 16.8 fixed point
	float2 Vert0 = Verts[0].xy;
	float2 Vert1 = Verts[1].xy;
	float2 Vert2 = Verts[2].xy;

	// Bounding rect
	const float2 MinSubpixel = min3(Vert0, Vert1, Vert2);
	const float2 MaxSubpixel = max3(Vert0, Vert1, Vert2);

#if 0
	bool2 bMissCenter = (MinSubpixel & QUARK_SUBPIXEL_MASK > (QUARK_SUBPIXEL_SAMPLES / 2)) &&
		(MaxSubpixel - (MinSubpixel & ~QUARK_SUBPIXEL_MASK) + (QUARK_SUBPIXEL_SAMPLES / 2)) < QUARK_SUBPIXEL_MASK;
	if (any(bMissCenter))
		Tri.bIsValid = false;
#endif

	// Round to nearest pixel
	Tri.MinPixel = (int2)floor((MinSubpixel + (QUARK_SUBPIXEL_SAMPLES / 2) - 1) * (1.0 / QUARK_SUBPIXEL_SAMPLES));
	Tri.MaxPixel = (int2)floor((MaxSubpixel - (QUARK_SUBPIXEL_SAMPLES / 2) - 1) * (1.0 / QUARK_SUBPIXEL_SAMPLES));	// inclusive!

	// Clip to viewport
	Tri.MinPixel = max(Tri.MinPixel, int2(0, 0));//Raster.ViewRect.xy
	Tri.MaxPixel = min(Tri.MaxPixel, int2(1023, 1023));//Raster.ViewRect.zw - 1

	// Force 1 pixel
	//MaxPixel = max( MaxPixel, MinPixel );

	// Limit the rasterizer bounds to a sensible max.
	Tri.MaxPixel = min(Tri.MaxPixel, Tri.MinPixel + 63);

	// Cull when no pixels covered
	if (any(Tri.MinPixel > Tri.MaxPixel))
		Tri.bIsValid = false;

	// 4.8 fixed point
	Tri.Edge01 = -v01.xy;
	Tri.Edge12 = Vert1 - Vert2;
	Tri.Edge20 = v02.xy;

//#if NANITE_TWO_SIDED
//	BRANCH
//		if (bBackFace)
//		{
//			// Swap winding order to support two sided materials
//			Tri.Edge01 *= -1.0f;
//			Tri.Edge12 *= -1.0f;
//			Tri.Edge20 *= -1.0f;
//		}
//#endif

	// Rebase off MinPixel with half pixel offset
	// 4.8 fixed point
	// Max triangle size = 127x127 pixels
	const float2 BaseSubpixel = (float2)Tri.MinPixel * QUARK_SUBPIXEL_SAMPLES + (QUARK_SUBPIXEL_SAMPLES / 2);
	Vert0 -= BaseSubpixel;
	Vert1 -= BaseSubpixel;
	Vert2 -= BaseSubpixel;

	// Half-edge constants
	// 8.16 fixed point
	Tri.C0 = Tri.Edge12.y * Vert1.x - Tri.Edge12.x * Vert1.y;
	Tri.C1 = Tri.Edge20.y * Vert2.x - Tri.Edge20.x * Vert2.y;
	Tri.C2 = Tri.Edge01.y * Vert0.x - Tri.Edge01.x * Vert0.y;

	// Correct for fill convention
	// Top left rule for CCW
#if 1
	Tri.C0 -= saturate(Tri.Edge12.y + saturate(1.0f - Tri.Edge12.x));
	Tri.C1 -= saturate(Tri.Edge20.y + saturate(1.0f - Tri.Edge20.x));
	Tri.C2 -= saturate(Tri.Edge01.y + saturate(1.0f - Tri.Edge01.x));
#else
	Tri.C0 -= (Tri.Edge12.y < 0 || (Tri.Edge12.y == 0 && Tri.Edge12.x > 0)) ? 0 : 1;
	Tri.C1 -= (Tri.Edge20.y < 0 || (Tri.Edge20.y == 0 && Tri.Edge20.x > 0)) ? 0 : 1;
	Tri.C2 -= (Tri.Edge01.y < 0 || (Tri.Edge01.y == 0 && Tri.Edge01.x > 0)) ? 0 : 1;
#endif

	float Z0 = Verts[0].z - (GradZ.x * Vert0.x + GradZ.y * Vert0.y);
	GradZ *= QUARK_SUBPIXEL_SAMPLES;

	Tri.DepthPlane = float3(GradZ, Z0);

#if 0
	// Step in pixel increments
	// 8.16 fixed point
	Tri.Edge01 *= QUARK_SUBPIXEL_SAMPLES;
	Tri.Edge12 *= QUARK_SUBPIXEL_SAMPLES;
	Tri.Edge20 *= QUARK_SUBPIXEL_SAMPLES;
#else
	// Scale C0/C1/C2 down by SubpixelSamples instead of scaling Edge01/Edge12/Edge20 up. Lossless because SubpixelSamples is a power of two.
	Tri.C0 *= (1.0f / QUARK_SUBPIXEL_SAMPLES);
	Tri.C1 *= (1.0f / QUARK_SUBPIXEL_SAMPLES);
	Tri.C2 *= (1.0f / QUARK_SUBPIXEL_SAMPLES);
#endif

	return Tri;
}

void RasterizeTri_Scanline_Inner(FRasterTri Tri) //FRaster Raster, uint PixelValue, const bool bSinglePage
{
	float CY0 = Tri.C0;
	float CY1 = Tri.C1;
	float CY2 = Tri.C2;
	float ZY = Tri.DepthPlane.z;

	float3 Edge012 = { Tri.Edge12.y, Tri.Edge20.y, Tri.Edge01.y };
	bool3 bOpenEdge = Edge012 < 0;
	float3 InvEdge012 = Edge012 == 0 ? 1e8 : rcp(Edge012);

	int y = Tri.MinPixel.y;
	while (true)
	{
		//float CX0 = CY0 - Edge12.y * (x - MinPixel.x);
		// Edge12.y * (x - MinPixel.x) <= CY0;

		/*
		if( Edge12.y > 0 )
			x <= CY0 / Edge12.y + MinPixel.x;	// Closing edge
		else
			x >= CY0 / Edge12.y + MinPixel.x;	// Opening edge
		*/

		// No longer fixed point
		float3 CrossX = float3(CY0, CY1, CY2) * InvEdge012;

		float3 MinX = bOpenEdge ? CrossX : 0;
		float3 MaxX = bOpenEdge ? Tri.MaxPixel.x - Tri.MinPixel.x : CrossX;

		float x0 = ceil(max3(MinX.x, MinX.y, MinX.z));
		float x1 = min3(MaxX.x, MaxX.y, MaxX.z);
		float CX0 = CY0 - x0 * Tri.Edge12.y;
		float CX1 = CY1 - x0 * Tri.Edge20.y;
		float CX2 = CY2 - x0 * Tri.Edge01.y;
		float ZX = ZY + Tri.DepthPlane.x * x0;

		x0 += Tri.MinPixel.x;
		x1 += Tri.MinPixel.x;
		for (float x = x0; x <= x1; x++)
		{
			//WritePixelSW(PixelValue, uint2(x, y), ZX, float3(CX0, CX1, CX2), Raster, Tri, bSinglePage);
			//FQuarkPixel pixel = (FQuarkPixel) 0;
            //WriteQuarkPixel(uint2(x, y), pixel);
			OutputQuarkTexture[uint2(x, y)] = float4(1, 0, 0, 1);

			CX0 -= Tri.Edge12.y;
			CX1 -= Tri.Edge20.y;
			CX2 -= Tri.Edge01.y;
			ZX += Tri.DepthPlane.x;
		}

		if (y >= Tri.MaxPixel.y)
			break;

		CY0 += Tri.Edge12.x;
		CY1 += Tri.Edge20.x;
		CY2 += Tri.Edge01.x;
		ZY += Tri.DepthPlane.y;
		y++;
	}
}

[numthreads(DispatchX, DispatchY, DispatchZ)]
void CS_DispatchArgMain(uint3 LocalThreadId : SV_GroupThreadID, uint3 GroupId : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{
    IndirectArgBuffer.Store(0, 0);
    uint count = VisibleClusterBuffer.Load(0);
    uint alignment = max(ShadingStruct.DispatchArg.x, 1);
    count = (count + alignment - 1) / alignment;
    //IndirectArgBuffer.Store(4, (VisibleClusterBuffer.Load(0) + (ShadingStruct.DispatchArg.x - 1)) / ShadingStruct.DispatchArg.x);
    IndirectArgBuffer.Store(4, count);
    IndirectArgBuffer.Store(8, 1);
    IndirectArgBuffer.Store(12, 1);
}

void TestRasterize(float2 A, float2 B, float2 C)
{
	float2 Size = ShadingStruct.QuarkRTSizeFactor;

	float2 Min;
	Min.x = max(min(min(A.x, B.x), C.x), 0);
	Min.y = max(min(min(A.y, B.y), C.y), 0);

	float2 Max;
	Max.x = min(max(max(A.x, B.x), C.x), Size.x);
	Max.y = min(max(max(A.y, B.y), C.y), Size.y);

	float yA_B = A.y -B.y;
	float xB_A = B.x - A.x;
	float ax_x_by = A.x *B.y;
	float bx_x_ay = B.x * A.y;
	float d1 = ax_x_by - bx_x_ay;

	float yA_C = A.y - C.y;
	float xC_A = C.x - A.x;
	float ax_x_cy = A.x * C.y;
	float cx_x_ay = C.x * A.y;
	float d2 = ax_x_cy - cx_x_ay;

	for (int y = Min.y; y <= Max.y; y++)
	{
		for (int x = Min.x; x <= Max.x; x++)
		{
			float2 P = float2(x, y);
			//var uv = Vector2i.Barycentric(in A, in B, in C, in P);
			//var PP = A * (1.0f - uv.X - uv.Y) + C * uv.X + B * uv.Y;
			//assert(PP == P);

			float sigma = (float)(yA_B * P.x + xB_A * P.y + d1) / (float)(yA_B * C.x + xB_A * C.y + d1);
			float gamma = (float)(yA_C * P.x + xC_A * P.y + d2) / (float)(yA_C * B.x + xC_A *B.y + d2);

			if (sigma < 0 || gamma < 0 || sigma + gamma > 1)
			{
				continue;
			}
			//draw pixel
			OutputQuarkTexture[uint2(x, y)] = float4(1, 0, 0, 1);
		}
	}
}

[numthreads(DispatchX, DispatchY, DispatchZ)]
void CS_Main(uint3 LocalThreadId : SV_GroupThreadID, uint3 GroupId : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{
	// TODO: group id used
#if 1
	//if (DTid.x < 1)
	//{
	//	int clusterIdx = 0;//VisibleClusterBuffer.Load((DTid.x % ShadingStruct.MaxVisClusterIndex) * 4) % ShadingStruct.MaxClusterIndex;
	//	if (clusterIdx >= ShadingStruct.MaxClusterIndex)
	//		return;
	//	FClusterData cluster = ClusterBuffer[clusterIdx];
	//	for (int i = cluster.IndexStart; i <= cluster.IndexEnd; i += 3)
	//	{
	//		float4 wvpPosition[3];
	//		FQuarkTriangle tri = GetQuarkTriangle(i, i + 1, i + 2);

	//		wvpPosition[0] = mul(float4(tri.Vertices[0].Position, 1), cluster.WVPMatrix);
	//		wvpPosition[1] = mul(float4(tri.Vertices[1].Position, 1), cluster.WVPMatrix);
	//		wvpPosition[2] = mul(float4(tri.Vertices[2].Position, 1), cluster.WVPMatrix);

	//		float3 pos[3];

	//		pos[0] = wvpPosition[0].xyz / wvpPosition[0].w;
	//		pos[1] = wvpPosition[1].xyz / wvpPosition[1].w;
	//		pos[2] = wvpPosition[2].xyz / wvpPosition[2].w;

	//		// muliply QUARK_SUBPIXEL_SAMPLES outside
	//		pos[0].xy *= QUARK_SUBPIXEL_SAMPLES;
	//		pos[1].xy *= QUARK_SUBPIXEL_SAMPLES;
	//		pos[2].xy *= QUARK_SUBPIXEL_SAMPLES;

	//		//do raster
	//		FRasterTri rasterTri = SetupTriangle(pos);
	//		if (rasterTri.bIsValid)
	//			RasterizeTri_Scanline_Inner(rasterTri);
	//	}
	//}

	FClusterData cluster = ClusterBuffer[0];
	int i = DTid.x * 3;
	if (i+2 < cluster.IndexEnd)
	{
		float4 wvpPosition[3];
		FQuarkTriangle tri = GetQuarkTriangle(i, i + 1, i + 2);

		wvpPosition[0] = mul(float4(tri.Vertices[0].Position, 1), cluster.WVPMatrix);
		wvpPosition[1] = mul(float4(tri.Vertices[1].Position, 1), cluster.WVPMatrix);
		wvpPosition[2] = mul(float4(tri.Vertices[2].Position, 1), cluster.WVPMatrix);

		float3 pos[3];

		pos[0] = wvpPosition[0].xyz / wvpPosition[0].w;
		pos[1] = wvpPosition[1].xyz / wvpPosition[1].w;
		pos[2] = wvpPosition[2].xyz / wvpPosition[2].w;

		//pos[0].xy *= QUARK_SUBPIXEL_SAMPLES;
		//pos[1].xy *= QUARK_SUBPIXEL_SAMPLES;
		//pos[2].xy *= QUARK_SUBPIXEL_SAMPLES;

		////do raster
		//FRasterTri rasterTri = SetupTriangle(pos);
		//if (rasterTri.bIsValid)
		//	RasterizeTri_Scanline_Inner(rasterTri);

		TestRasterize(pos[0].xy, pos[1].xy, pos[2].xy);
	}
#else
	if (DTid.x < 1)
	{
		float3 pos[3];
		/*pos[0] = float3(372 * QUARK_SUBPIXEL_SAMPLES, 757 * QUARK_SUBPIXEL_SAMPLES, 0);
		pos[1] = float3(1278 * QUARK_SUBPIXEL_SAMPLES, 1077 * QUARK_SUBPIXEL_SAMPLES, 0);
		pos[2] = float3(958 * QUARK_SUBPIXEL_SAMPLES, 757 * QUARK_SUBPIXEL_SAMPLES, 0);*/

		//pos[0] = float3(0 * QUARK_SUBPIXEL_SAMPLES, 5 * QUARK_SUBPIXEL_SAMPLES, 0);
		//pos[1] = float3(1200 * QUARK_SUBPIXEL_SAMPLES, 800 * QUARK_SUBPIXEL_SAMPLES, 0);
		//pos[2] = float3(1200 * QUARK_SUBPIXEL_SAMPLES, 5 * QUARK_SUBPIXEL_SAMPLES, 0);

		////do raster
		//FRasterTri rasterTri = SetupTriangle(pos);
		//if (rasterTri.bIsValid)
		//	RasterizeTri_Scanline_Inner(rasterTri);

		pos[0] = float3(0 , 5, 0);
		pos[1] = float3(1200, 800, 0);
		pos[2] = float3(1200, 5, 0);

		//do raster
		TestRasterize(pos[0].xy, pos[1].xy, pos[2].xy);
	}
#endif
}

#endif
